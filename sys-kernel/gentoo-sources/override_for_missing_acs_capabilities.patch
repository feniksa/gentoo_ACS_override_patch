--- orig/drivers/pci/quirks.c	2023-03-13 13:14:21.109852867 -0700
+++ drivers/pci/quirks.c	2023-03-13 13:16:26.708356709 -0700
@@ -4855,6 +4855,111 @@
 	return false;
 }
 
+/*
+* PCIe ACS Override
+*/
+static bool acs_on_downstream;
+static bool acs_on_multifunction;
+
+#define NUM_ACS_IDS 16
+struct acs_on_id {
+	unsigned short vendor;
+	unsigned short device;
+};
+static struct acs_on_id acs_on_ids[NUM_ACS_IDS];
+static u8 max_acs_id;
+
+static __init int pcie_acs_override_setup(char *p)
+{
+       if (!p)
+               return -EINVAL;
+
+       while (*p) {
+               if (!strncmp(p, "downstream", 10))
+                       acs_on_downstream = true;
+               if (!strncmp(p, "multifunction", 13))
+                       acs_on_multifunction = true;
+               if (!strncmp(p, "id:", 3)) {
+                       char opt[5];
+                       int ret;
+                       long val;
+
+                       if (max_acs_id >= NUM_ACS_IDS - 1) {
+                               pr_warn("Out of PCIe ACS override slots (%d)\n",
+                                       NUM_ACS_IDS);
+                               goto next;
+                       }
+
+                       p += 3;
+                       snprintf(opt, 5, "%s", p);
+                       ret = kstrtol(opt, 16, &val);
+                       if (ret) {
+                               pr_warn("PCIe ACS ID parse error %d\n", ret);
+                               goto next;
+                       }
+                       acs_on_ids[max_acs_id].vendor = val;
+
+                       p += strcspn(p, ":");
+                       if (*p != ':') {
+                               pr_warn("PCIe ACS invalid ID\n");
+                               goto next;
+                       }
+
+                       p++;
+                       snprintf(opt, 5, "%s", p);
+                       ret = kstrtol(opt, 16, &val);
+                       if (ret) {
+                               pr_warn("PCIe ACS ID parse error %d\n", ret);
+                               goto next;
+                       }
+                       acs_on_ids[max_acs_id].device = val;
+                       max_acs_id++;
+               }
+next:
+               p += strcspn(p, ",");
+               if (*p == ',')
+                       p++;
+       }
+
+       if (acs_on_downstream || acs_on_multifunction || max_acs_id)
+               pr_warn("Warning: PCIe ACS overrides enabled; This may allow non-IOMMU protected peer-to-peer DMA\n");
+
+       return 0;
+}
+
+early_param("pcie_acs_override", pcie_acs_override_setup);
+
+static int pcie_acs_overrides(struct pci_dev *dev, u16 acs_flags)
+{
+       int i;
+
+       /* Never override ACS for legacy devices or devices with ACS caps */
+       if (!pci_is_pcie(dev) ||
+           pci_find_ext_capability(dev, PCI_EXT_CAP_ID_ACS))
+               return -ENOTTY;
+
+       for (i = 0; i < max_acs_id; i++)
+               if (acs_on_ids[i].vendor == dev->vendor &&
+                   acs_on_ids[i].device == dev->device)
+                       return 1;
+
+       switch (pci_pcie_type(dev)) {
+       case PCI_EXP_TYPE_DOWNSTREAM:
+       case PCI_EXP_TYPE_ROOT_PORT:
+               if (acs_on_downstream)
+                       return 1;
+               break;
+       case PCI_EXP_TYPE_ENDPOINT:
+       case PCI_EXP_TYPE_UPSTREAM:
+       case PCI_EXP_TYPE_LEG_END:
+       case PCI_EXP_TYPE_RC_END:
+               if (acs_on_multifunction && dev->multifunction)
+                       return 1;
+       }
+
+       return -ENOTTY;
+}
+
 static const struct pci_dev_acs_enabled {
 	u16 vendor;
 	u16 device;
@@ -5000,6 +5105,8 @@
 	{ PCI_VENDOR_ID_NXP, 0x8d9b, pci_quirk_nxp_rp_acs },
 	/* Zhaoxin Root/Downstream Ports */
 	{ PCI_VENDOR_ID_ZHAOXIN, PCI_ANY_ID, pci_quirk_zhaoxin_pcie_ports_acs },
+	/* IOMMU ACS override patch */
+	{ PCI_ANY_ID, PCI_ANY_ID, pcie_acs_overrides },
 	/* Wangxun nics */
 	{ PCI_VENDOR_ID_WANGXUN, PCI_ANY_ID, pci_quirk_wangxun_nic_acs },
 	{ 0 }
